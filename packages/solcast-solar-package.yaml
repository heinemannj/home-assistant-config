# ########## SolCast PV Forecast Integration ##########
#
# solcast-solar-package.yaml
#
# - automation.solcast_pv_forecast_api_update
# - sensor.solcast-solar-package.yaml
#
# API Update
#
automation:
  - id: solcast_pv_forecast_api_update
    alias: "SolCast PV Forecast - API Update"
    description: >-
      Update the SolCast PV Forecast data every 90 minutes while the sun is at least 10 degrees above the horizon.
    trigger:
      - platform: time
        at:
          - "05:46"
          - "07:16"
          - "08:46"
          - "10:16"
          - "11:46"
          - "13:16"
          - "14:46"
          - "16:16"
          - "17:46"
          - "19:16"
    condition:
      - condition: numeric_state
        entity_id: sun.sun
        value_template: "{{ state.attributes.elevation }}"
        above: 10
    action:
      - service: solcast_solar.update_forecasts
        data: {}
    mode: single
#
# Estimation of actual remaining Solcast Forecast (Every Minute)
#
# - Attributes for expected_battery_charge_end_time
# - Attributes for expected_battery_charge_end_energy
#
template:
  - trigger:
      - platform: state
        entity_id: sensor.solcast_forecast_today
        not_from:
          - "unknown"
          - "unavailable"
          - "none"
        not_to:
          - "unknown"
          - "unavailable"
          - "none"
      - platform: time_pattern
        minutes: "/1"
    sensor:
      - name: solcast_forecast_remaining_today_every_minute
        unique_id: solcast_forecast_remaining_today_every_minute
        #friendly_name: "Solcast Forecast Remaining Today (Every Minute)"
        state_class: "total"
        device_class: energy
        unit_of_measurement: "kWh"
        icon: mdi:solar-power
        state: >-
          {%- set forecast_today = state_attr('sensor.solcast_forecast_today', 'detailedForecast') %}

          {%- set var = namespace(total = 0) %}
          {%- set ts_now = ((as_timestamp(now())/1800)|round(0,'floor')|int * 1800) %}

          {%- if now().minute < 30 %}
            {%- set var.ts_actual_period = today_at(now().hour ~ ':00').timestamp() %}
            {%- set var.remaining_minutes_actual_period = 30 - now().minute %}
          {% else %}
            {%- set var.ts_actual_period = today_at(now().hour ~ ':30').timestamp() %}
            {%- set var.remaining_minutes_actual_period = 60 - now().minute %}
          {%- endif %}

          {%- for record in forecast_today %}
            {%- set ts = as_timestamp(record.period_start) %}      
            {%- if ts == var.ts_actual_period %}
              {%- set var.total = var.total + (record.pv_estimate / 30 * var.remaining_minutes_actual_period) %}
            {%- endif %}
            {%- if ts > ts_now %}
              {%- set var.total = var.total + record.pv_estimate %}
            {%- endif %}
          {%- endfor %}
          {{ var.total }}
        attributes:
          expected_battery_charge_end_time: "14:00"
          expected_battery_charge_end_energy: >-
            {%- set forecast_today = state_attr('sensor.solcast_forecast_today', 'detailedForecast') %}
            {%- set ts_expected_charge_end_time = today_at(this.attributes.expected_battery_charge_end_time).timestamp() %}

            {%- set var = namespace(total = 0) %}
            {%- set ts_now = ((as_timestamp(now())/1800)|round(0,'floor')|int * 1800) %}

            {%- if now().minute < 30 %}
              {%- set var.ts_actual_period = today_at(now().hour ~ ':00').timestamp() %}
              {%- set var.remaining_minutes_actual_period = 30 - now().minute %}
            {% else %}
              {%- set var.ts_actual_period = today_at(now().hour ~ ':30').timestamp() %}
              {%- set var.remaining_minutes_actual_period = 60 - now().minute %}
            {%- endif %}

            {%- for record in forecast_today %}
              {%- set ts = as_timestamp(record.period_start) %}      
              {%- if ts == var.ts_actual_period and ts < ts_expected_charge_end_time %}
                {%- set var.total = var.total + (record.pv_estimate / 30 * var.remaining_minutes_actual_period) %}
              {%- endif %}
              {%- if ts > ts_now and ts < ts_expected_charge_end_time %}
                {%- set var.total = var.total + record.pv_estimate %}
              {%- endif %}
            {%- endfor %}
            {{ var.total }}
        availability: >-
          {{ (states('sensor.solcast_forecast_today')|is_number) }}
